generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id          Int      @id @default(autoincrement())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdById String
    createdBy   User     @relation(fields: [createdById], references: [id])

    @@index([name])
    @@index([createdById])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                     String       @id @default(cuid())
    name                   String?
    email                  String?      @unique
    emailVerified          DateTime?
    image                  String?
    nickname               String?      @unique
    UUID                   String?
    balance                Int          @default(0)
    subscription           Subscription @default(NO)
    subscriptionOwner      String?
    noSubscriptionOwnerYet String?
    addedPlayers           String[]
    noPlayersAddedYet      String[]
    favorite               Int[]
    acquired               Int[]
    expirydate             DateTime?
    volume                 Float        @default(0.5)
    accounts               Account[]
    posts                  Post[]
    sessions               Session[]
}

model Film {
    id           Int          @id
    imgID        String
    content      ContentTypes
    describe     String
    mark         Float
    watched      Int
    types        Types[]
    timing       Int[]
    studio       String
    code         String       @unique
    subscription Int
    datePremiere DateTime
    price        Int
    more         String
    youtube      String?
}

model View {
    nickname String?
    codetag  String? @unique
    key      String  @id @default(uuid())
    timeKey  Int     @default(0)
    watched  Boolean @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Subscription {
    NO
    ONE
    MULTI
    fMULTI
    MAX
    fMAX
    ADMIN
}

enum Types {
    comedy
    drama
    thriler
    romance
    horror
    action
    fantasy
    historical
    darkcomedy
    musicals
    animated
}

enum ContentTypes {
    movies
    series
    shows
}
